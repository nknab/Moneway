// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction/protobuf/transaction.proto

package transaction

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MakeTransaction struct {
	AccountID            int32    `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Amount               float64  `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency             string   `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	TransactionType      string   `protobuf:"bytes,5,opt,name=transactionType,proto3" json:"transactionType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MakeTransaction) Reset()         { *m = MakeTransaction{} }
func (m *MakeTransaction) String() string { return proto.CompactTextString(m) }
func (*MakeTransaction) ProtoMessage()    {}
func (*MakeTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f68f12aedde21ed, []int{0}
}

func (m *MakeTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MakeTransaction.Unmarshal(m, b)
}
func (m *MakeTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MakeTransaction.Marshal(b, m, deterministic)
}
func (m *MakeTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MakeTransaction.Merge(m, src)
}
func (m *MakeTransaction) XXX_Size() int {
	return xxx_messageInfo_MakeTransaction.Size(m)
}
func (m *MakeTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MakeTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_MakeTransaction proto.InternalMessageInfo

func (m *MakeTransaction) GetAccountID() int32 {
	if m != nil {
		return m.AccountID
	}
	return 0
}

func (m *MakeTransaction) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MakeTransaction) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *MakeTransaction) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *MakeTransaction) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

type MakeTransactionReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Id                   int32    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MakeTransactionReply) Reset()         { *m = MakeTransactionReply{} }
func (m *MakeTransactionReply) String() string { return proto.CompactTextString(m) }
func (*MakeTransactionReply) ProtoMessage()    {}
func (*MakeTransactionReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1f68f12aedde21ed, []int{1}
}

func (m *MakeTransactionReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MakeTransactionReply.Unmarshal(m, b)
}
func (m *MakeTransactionReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MakeTransactionReply.Marshal(b, m, deterministic)
}
func (m *MakeTransactionReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MakeTransactionReply.Merge(m, src)
}
func (m *MakeTransactionReply) XXX_Size() int {
	return xxx_messageInfo_MakeTransactionReply.Size(m)
}
func (m *MakeTransactionReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MakeTransactionReply.DiscardUnknown(m)
}

var xxx_messageInfo_MakeTransactionReply proto.InternalMessageInfo

func (m *MakeTransactionReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MakeTransactionReply) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MakeTransactionReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*MakeTransaction)(nil), "transaction.MakeTransaction")
	proto.RegisterType((*MakeTransactionReply)(nil), "transaction.MakeTransactionReply")
}

func init() {
	proto.RegisterFile("transaction/protobuf/transaction.proto", fileDescriptor_1f68f12aedde21ed)
}

var fileDescriptor_1f68f12aedde21ed = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xd9, 0xd4, 0xd4, 0x64, 0x02, 0x56, 0x06, 0x91, 0xa5, 0xf4, 0x10, 0x7b, 0x90, 0x9c,
	0x5a, 0xd0, 0x57, 0xf0, 0x22, 0xe2, 0x65, 0xe8, 0xc9, 0xdb, 0x76, 0xb2, 0x4a, 0xd0, 0x26, 0x61,
	0x37, 0x39, 0xe4, 0xa9, 0x7c, 0x45, 0xc9, 0x60, 0xcd, 0x92, 0x83, 0xb7, 0xfc, 0x5f, 0xfe, 0x65,
	0x3e, 0x7e, 0xb8, 0xef, 0x9c, 0xa9, 0xbd, 0xe1, 0xae, 0x6a, 0xea, 0x7d, 0xeb, 0x9a, 0xae, 0x39,
	0xf6, 0xef, 0xfb, 0x00, 0xee, 0x04, 0x62, 0x16, 0xa0, 0xed, 0xb7, 0x82, 0xd5, 0xab, 0xf9, 0xb4,
	0x87, 0x89, 0xe1, 0x06, 0x52, 0xc3, 0xdc, 0xf4, 0x75, 0xf7, 0xfc, 0xa4, 0x55, 0xae, 0x8a, 0x98,
	0x26, 0x80, 0x39, 0x64, 0xa5, 0xf5, 0xec, 0xaa, 0x76, 0x2c, 0xeb, 0x28, 0x57, 0x45, 0x4a, 0x21,
	0xc2, 0x5b, 0x58, 0x9a, 0xd3, 0xd8, 0xd6, 0x8b, 0x5c, 0x15, 0x8a, 0x7e, 0x13, 0xae, 0x21, 0xe1,
	0xde, 0x39, 0x5b, 0xf3, 0xa0, 0x2f, 0xe4, 0xd9, 0x5f, 0xc6, 0x02, 0x56, 0x81, 0xd6, 0x61, 0x68,
	0xad, 0x8e, 0xa5, 0x32, 0xc7, 0x5b, 0x82, 0x9b, 0x99, 0x30, 0xd9, 0xf6, 0x6b, 0x40, 0x0d, 0x97,
	0xbe, 0x67, 0xb6, 0xde, 0x8b, 0x73, 0x42, 0xe7, 0x88, 0x57, 0x10, 0x55, 0xa5, 0x88, 0xc6, 0x14,
	0x55, 0x25, 0x5e, 0xc3, 0xe2, 0xe4, 0x3f, 0x44, 0x2e, 0xa5, 0xf1, 0xf3, 0xe1, 0x0d, 0xb2, 0x70,
	0x80, 0x17, 0x48, 0xce, 0x57, 0x71, 0xb3, 0x0b, 0x17, 0x9c, 0x5d, 0x5e, 0xdf, 0xfd, 0xf7, 0x57,
	0xbc, 0x8e, 0x4b, 0x59, 0xfd, 0xf1, 0x27, 0x00, 0x00, 0xff, 0xff, 0x07, 0xe6, 0x35, 0x93, 0x9f,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransactionClient is the client API for Transaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionClient interface {
	Transact(ctx context.Context, in *MakeTransaction, opts ...grpc.CallOption) (*MakeTransactionReply, error)
}

type transactionClient struct {
	cc *grpc.ClientConn
}

func NewTransactionClient(cc *grpc.ClientConn) TransactionClient {
	return &transactionClient{cc}
}

func (c *transactionClient) Transact(ctx context.Context, in *MakeTransaction, opts ...grpc.CallOption) (*MakeTransactionReply, error) {
	out := new(MakeTransactionReply)
	err := c.cc.Invoke(ctx, "/transaction.Transaction/transact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServer is the server API for Transaction service.
type TransactionServer interface {
	Transact(context.Context, *MakeTransaction) (*MakeTransactionReply, error)
}

func RegisterTransactionServer(s *grpc.Server, srv TransactionServer) {
	s.RegisterService(&_Transaction_serviceDesc, srv)
}

func _Transaction_Transact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).Transact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transaction.Transaction/Transact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).Transact(ctx, req.(*MakeTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transaction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transaction.Transaction",
	HandlerType: (*TransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "transact",
			Handler:    _Transaction_Transact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction/protobuf/transaction.proto",
}
